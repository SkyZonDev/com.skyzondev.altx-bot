const { SlashCommandBuilder, EmbedBuilder, ButtonBuilder, ButtonStyle, ComponentType, ActionRowBuilder } = require('discord.js');
require('dotenv').config();

var version = "-- v1.0.0";
module.exports = {
    data : new SlashCommandBuilder()
        .setName('setrules')
        .setDescription('Envoy√© le r√®glement'),
    async execute({interaction}) {
        const ticket = interaction.guild.channels.cache.get(process.env.SE_TICKET);
        const rules = interaction.guild.channels.cache.get(process.env.SE_REGLEMENT);

        const embed = new EmbedBuilder()
            .setAuthor({
                name: version,
            })
            .setTitle("R√®glement - ALTX")
            .setDescription(`Bienvenue sur **Chicago LakeshoreRP** ! Pour garantir une exp√©rience agr√©able et respectueuse pour tous nos membres, nous vous prions de lire attentivement et de respecter les r√®gles suivantes. La violation de ces r√®gles peut entra√Æner des avertissements, des mesures disciplinaires et, dans certains cas, des exclusions.\n\n**1. Respect et tol√©rance :**\n> Soyez poli et respectueux envers tous les membres, quelles que soient leurs opinions, leurs origines, leur sexe, leur orientation sexuelle, leur √¢ge, ou leur religion. \n> √âvitez les insultes, le harc√®lement, la discrimination, le discours de haine, et toute forme de comportement toxique.\n\n**2. Contenu appropri√© :**\n> √âvitez de publier du contenu offensant, obsc√®ne, pornographique, ill√©gal, ou tout autre contenu inappropri√©. \n> Le langage vulgaire est autoris√© dans la limite du raisonnable, mais n'oubliez pas que la courtoisie est de mise.\n\n**3. Respect de la vie priv√©e :**\n> Ne partagez pas d'informations personnelles d'autres membres sans leur consentement. \n> Ne publiez pas de liens, de photos ou de vid√©os contenant des informations priv√©es de tiers.\n\n**4. Spam et publicit√© :**\n> √âvitez le spam, le flood ou la publicit√© non autoris√©e. \n> Les messages promotionnels ne sont autoris√©s que dans le canal pr√©vu √† cet effet (g√©n√©ralement \"self promotion\").\n\n**5. Respect du contenu :**\n> Obtenez la permission de l'auteur avant de publier, partager ou distribuer tout contenu cr√©√© par quelqu'un d'autre (images, vid√©os, textes, etc.).\n\n**6. Utilisation des salons :**\n> Utilisez les canaux de mani√®re appropri√©e en fonction de leur objet. \n> √âvitez le hors sujet dans les canaux de discussion sp√©cifiques.\n\n**7. Signalement des infractions :**\n> Si vous constatez une infraction aux r√®gles, signalez l√† √† l'√©quipe de mod√©ration en fournissant des captures d'√©cran et des informations d√©taill√©es.\n\n**8. Mesures disciplinaires :**\n> Les mod√©rateurs peuvent avertir, exclure temporairement ou d√©finitivement les membres qui enfreignent les r√®gles, en fonction de la gravit√© de l'infraction. \n> Les d√©cisions de l'√©quipe de mod√©ration sont finales.\n\n**9. Contenu du serveur :**\n> Tout contenu publi√© sur le serveur (texte, images, vid√©os, etc.) appartient au serveur et peut √™tre modifi√© ou supprim√© par les mod√©rateurs.\n\n**10. Modification du r√®glement :**\n> Ce r√®glement peut √™tre modifi√© √† tout moment. Les membres en seront inform√©s, et il leur incombe de le lire r√©guli√®rement. En rejoignant Chicago LakeshoreRP, vous acceptez de respecter ce r√®glement. \n> Nous vous remercions de contribuer √† maintenir un environnement agr√©able et respectueux pour tous.\n\nVous avez √† votre disposition le salon ${ticket} si vous avez une quelconque questions o√π besoin d'aide\n\n**La Direction** et **Le Staff** de CLSRP vous souhaite de passer un bon moment avec nous üéÖ`)
            .setImage("https://cdn.discordapp.com/attachments/1171655244808212492/1171703198403276891/standard.gif?ex=655da4a3&is=654b2fa3&hm=2316721c306af8b8a5cd317a3694302e59bba2db82572766ec255d3d5482d463&")
            .setColor("#00b0f4")
            .setFooter({
                text: "La Direction CLSRP",
                iconURL: "https://cdn.discordapp.com/attachments/1171655244808212492/1171656991106662480/CLSRP_Bot_dark.png?ex=655d799b&is=654b049b&hm=a7464ab30dcc13b5d021fb1724defcf3de675f9a9483926f59b09630cb81b9b5&",
            })
            .setTimestamp();
        const acceptBtn = new ButtonBuilder().setStyle(ButtonStyle.Success).setCustomId("accept").setLabel("Accepter") //.setEmoji("‚úÖ");
        const rejectBtn = new ButtonBuilder().setStyle(ButtonStyle.Danger).setCustomId("reject").setLabel("Rejeter") //.setEmoji("‚ùå");
        const row = new ActionRowBuilder().addComponents(acceptBtn, rejectBtn);
        await rules.send({ embeds: [embed] });
        const response = await rules.send({ components: [row] });

        const filter = (i) => i.user.id === interaction.user.id;

        const collector = response.createMessageComponentCollector({
            componentType: ComponentType.Button,
            filter,
        });
        collector.on("collect", async (interaction) => {
            if (interaction.customId === "accept") {
                const reply = await interaction.reply({ content: "R√®glement accept√©", ephemeral: true });
                const roleID = process.env.ACP_REG;
                const role = interaction.guild.roles.cache.get(roleID);
                if (role) {
                    interaction.member.roles.add(role);
                }
                await response.delete();
                setTimeout(async () => {
                    await reply.delete();
                }, 4000);
            } else if (interaction.customId === "reject") {
                const reply = await interaction.reply({ content: "R√®glement rejet√©", ephemeral: true });
                const roleID = process.env.RJT_REG;
                const role = interaction.guild.roles.cache.get(roleID);
                if (role) {
                    interaction.member.roles.add(role); 
                }
                await response.delete();
                setTimeout(async () => {
                    await reply.delete();
                }, 4000);
            }
        });










        collector.on("collect", async (interaction) => {
            if (interaction.customId === "accept") {
                // Retirer le bouton "Accepter"
                acceptBtn.setDisabled(true);
                rejectBtn.setDisabled(true);
                row.addComponents(acceptBtn);
        
                const roleID = process.env.ACP_REG;
                const role = interaction.guild.roles.cache.get(roleID);
                if (role) {
                    interaction.member.roles.add(role);
                }

                await interaction.reply({ content: "R√®glement rejet√©", ephemeral: true });
                // Ajouter le bouton "Modifier"
                const modifyBtn = new ButtonBuilder().setStyle(ButtonStyle.Primary).setCustomId("modify").setLabel("Modifier");
                row.addComponents(modifyBtn);
        
                await interaction.update({ components: [row] });
            } else if (interaction.customId === "reject") {
                rejectBtn.setDisabled(true);
                acceptBtn.setDisabled(true);
                row.addComponents(rejectBtn);
                const roleID = process.env.RJT_REG;
                const role = interaction.guild.roles.cache.get(roleID);
                if (role) {
                    interaction.member.roles.add(role);
                }
                await interaction.reply({ content: "R√®glement rejet√©", ephemeral: true });
                await response.delete();
            } else if (interaction.customId === "modify") {
                // G√©rer la modification du choix ici
                // Par exemple, vous pouvez renvoyer un message pour permettre √† l'utilisateur de revoir et de changer sa d√©cision.
                await interaction.reply({ content: "Vous pouvez maintenant modifier votre choix." });
            }
        });
        
        
    }
};